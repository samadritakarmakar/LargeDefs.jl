struct HyperElasticModel
    strainEnergyDensity::Function
    secondPiolaStress::Function
    materialTangentTensor::Function
end

function strainEnergyDensityGreenLagrangeBased(model_œà::Function, E::SymmetricTensor{2,dim,T}, parameters::Tuple) where {dim, T}
    return model_œà(E, parameters)
end

function secondPiolaStressGreenLagrangeBased(model_œà::Function, E::SymmetricTensor{2,dim,T}, parameters::Tuple) where {dim, T}
    œà(e) = model_œà(e, parameters)
    return gradient(œà, E)
end

#=
function secondPiolaStressRightCauchyBased(model_œà::Function, C::Tensor{2,dim,T}, parameters::Tuple) where {dim, T}
    œà(c) = model_œà(c, parameters)
    return 2*gradient(œà, c)
end
=#

function materialTangentGreenLagrangeBased(model_œà::Function, E::SymmetricTensor{2,dim,T}, parameters::Tuple) where {dim, T}
    œà(e) = model_œà(e, parameters)
    return hessian(œà, E)
end

#=
function materialTangentRightCauchyBased(model_œà::Function, C::Tensor{2,dim,T}, parameters::Tuple) where {dim, T}
    œà(c) = model_œà(c, parameters)
    return 4*hessian(œà, c)
end
=#

function cauchyStress(model::HyperElasticModel, F::Tensor{2,dim,T}, parameters::Tuple) where {dim, T}
    E = getGreenLagrangeStrain(F)
    S = model.secondPiolaStress(E, parameters)
    return 1/det(F)*F‚ãÖS‚ãÖF'
end

function spatialTangentTensor(model::HyperElasticModel, F::Tensor{2,dim,T}, parameters::Tuple) where {dim, T}
    E = getGreenLagrangeStrain(F)
    ‚ÑÇ = model.materialTangentTensor(E, parameters)
    #F_front = otimesu(F, F)
    #F_back = otimesl(F, F)
    #return 1/det(F)*(F_front‚ä°C‚ä°F_back) 
    ùïî = zeros(3,3,3,3)
    for L ‚àà 1:3
        for K ‚àà 1:3
            for J ‚àà 1:3
                for I ‚àà 1:3
                    ‚ÑÇ_IJKL=‚ÑÇ[I,J,K,L]
                    for l ‚àà 1:3
                        F_lL = F[l,L]
                        for k ‚àà 1:3
                            F_kK =F[k,K]
                            for j ‚àà 1:3
                                F_jJ = F[j,J]
                                for i ‚àà 1:3
                                    ùïî[i,j,k,l] += F[i,I]*F_jJ*F_kK*F_lL*‚ÑÇ_IJKL
                                end
                            end
                        end
                    end
                end
            end
        end
    end 
    return 1/det(F)*Tensor{4,3, Float64}(ùïî)
end

##############Models are Defined Below################################################

#########################Saint Venant###################################################3
function saintVenant_œà(E::SymmetricTensor{2,dim,T}, Œª_Œº::Tuple{Float64, Float64}) where {dim, T}
    Œª = Œª_Œº[1]
    Œº = Œª_Œº[2]
    C = 2*E + one(E)
    Ic = getFirstInvariant(C)
    IIc = getSecondInvariant(C)
    return 1.0/8.0*(Œª + 2*Œº)*(Ic - 3.0)^2 - Œº/2.0 * (-2*Ic + IIc + 3)
end

function saintVenantStrainEnergyDensity(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return strainEnergyDensityGreenLagrangeBased(saintVenant_œà, E, parameters)
end

function saintVenantSecondPiola(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return secondPiolaStressGreenLagrangeBased(saintVenant_œà, E, parameters)
end

function saintVenantMaterialTangent(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return materialTangentGreenLagrangeBased(saintVenant_œà, E, parameters)
end

const saintVenant = HyperElasticModel(saintVenantStrainEnergyDensity, saintVenantSecondPiola, saintVenantMaterialTangent)
#######################################################################################

##########################Neo Hookean Compressible#########################################
function neoHookeanCompressible_œà(E::SymmetricTensor{2,dim,T}, Œª_Œº::Tuple{Float64, Float64}) where {dim, T}
    Œª = Œª_Œº[1]
    Œº = Œª_Œº[2]
    C = 2*E + one(E)
    Ic = getFirstInvariant(C)
    J = sqrt(det(C))
    return (Œª / 2) * (log(J))^2 - Œº * log(J) + (Œº / 2) * (Ic - 3)
end

function neoHookeanCompressibleStrainEnergyDensity(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return strainEnergyDensityGreenLagrangeBased(neoHookeanCompressible_œà, E, parameters)
end

function neoHookeanCompressibleSecondPiola(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return secondPiolaStressGreenLagrangeBased(neoHookeanCompressible_œà, E, parameters)
end

function neoHookeanCompressibleMaterialTangent(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return materialTangentGreenLagrangeBased(neoHookeanCompressible_œà, E, parameters)
end

const neoHookeanCompressible = HyperElasticModel(neoHookeanCompressibleStrainEnergyDensity, neoHookeanCompressibleSecondPiola, neoHookeanCompressibleMaterialTangent)
#######################################################################################

##########################Neo Hookean#########################################
function neoHookean_œà(E::SymmetricTensor{2,dim,T}, D1_Œº::Tuple{Float64, Float64}) where {dim, T}
    D1 = D1_Œº[1]
    Œº = D1_Œº[2]
    C = 2*E + one(E)
    Ic = getFirstInvariant(C)
    J = sqrt(det(C))
    IÃÑ‚ÇÅ = J^(-2/3)*Ic
    return (Œº / 2) * (IÃÑ‚ÇÅ - 3.0) +  (1.0/D1) * (J - 1)^2
end

function neoHookeanStrainEnergyDensity(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return strainEnergyDensityGreenLagrangeBased(neoHookean_œà, E, parameters)
end

function neoHookeanSecondPiola(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return secondPiolaStressGreenLagrangeBased(neoHookean_œà, E, parameters)
end

function neoHookeanMaterialTangent(E::SymmetricTensor{2,dim,T}, parameters::Tuple{Float64, Float64}) where {dim, T}
    return materialTangentGreenLagrangeBased(neoHookean_œà, E, parameters)
end

const neoHookean = HyperElasticModel(neoHookeanStrainEnergyDensity, neoHookeanSecondPiola, neoHookeanMaterialTangent)

